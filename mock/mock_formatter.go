// Code generated by MockGen. DO NOT EDIT.
// Source: core/formatter.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "github.com/codefluence-x/altair/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOauthApplicationFormater is a mock of OauthApplicationFormater interface
type MockOauthApplicationFormater struct {
	ctrl     *gomock.Controller
	recorder *MockOauthApplicationFormaterMockRecorder
}

// MockOauthApplicationFormaterMockRecorder is the mock recorder for MockOauthApplicationFormater
type MockOauthApplicationFormaterMockRecorder struct {
	mock *MockOauthApplicationFormater
}

// NewMockOauthApplicationFormater creates a new mock instance
func NewMockOauthApplicationFormater(ctrl *gomock.Controller) *MockOauthApplicationFormater {
	mock := &MockOauthApplicationFormater{ctrl: ctrl}
	mock.recorder = &MockOauthApplicationFormaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOauthApplicationFormater) EXPECT() *MockOauthApplicationFormaterMockRecorder {
	return m.recorder
}

// ApplicationList mocks base method
func (m *MockOauthApplicationFormater) ApplicationList(ctx context.Context, applications []entity.OauthApplication) []entity.OauthApplicationJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationList", ctx, applications)
	ret0, _ := ret[0].([]entity.OauthApplicationJSON)
	return ret0
}

// ApplicationList indicates an expected call of ApplicationList
func (mr *MockOauthApplicationFormaterMockRecorder) ApplicationList(ctx, applications interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationList", reflect.TypeOf((*MockOauthApplicationFormater)(nil).ApplicationList), ctx, applications)
}
