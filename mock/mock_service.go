// Code generated by MockGen. DO NOT EDIT.
// Source: core/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "github.com/codefluence-x/altair/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApplicationManager is a mock of ApplicationManager interface
type MockApplicationManager struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationManagerMockRecorder
}

// MockApplicationManagerMockRecorder is the mock recorder for MockApplicationManager
type MockApplicationManagerMockRecorder struct {
	mock *MockApplicationManager
}

// NewMockApplicationManager creates a new mock instance
func NewMockApplicationManager(ctrl *gomock.Controller) *MockApplicationManager {
	mock := &MockApplicationManager{ctrl: ctrl}
	mock.recorder = &MockApplicationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationManager) EXPECT() *MockApplicationManagerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockApplicationManager) List(ctx context.Context, offset, limit int) ([]entity.OauthApplicationJSON, int, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]entity.OauthApplicationJSON)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*entity.Error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List
func (mr *MockApplicationManagerMockRecorder) List(ctx, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationManager)(nil).List), ctx, offset, limit)
}

// One mocks base method
func (m *MockApplicationManager) One(ctx context.Context, ID int) (entity.OauthApplicationJSON, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", ctx, ID)
	ret0, _ := ret[0].(entity.OauthApplicationJSON)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// One indicates an expected call of One
func (mr *MockApplicationManagerMockRecorder) One(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockApplicationManager)(nil).One), ctx, ID)
}

// Create mocks base method
func (m *MockApplicationManager) Create(ctx context.Context, e entity.OauthApplicationJSON) (entity.OauthApplicationJSON, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, e)
	ret0, _ := ret[0].(entity.OauthApplicationJSON)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockApplicationManagerMockRecorder) Create(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApplicationManager)(nil).Create), ctx, e)
}

// MockAuthorization is a mock of Authorization interface
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// Grantor mocks base method
func (m *MockAuthorization) Grantor(ctx context.Context, authorizationReq entity.AuthorizationRequestJSON) (interface{}, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Grantor", ctx, authorizationReq)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// Grantor indicates an expected call of Grantor
func (mr *MockAuthorizationMockRecorder) Grantor(ctx, authorizationReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Grantor", reflect.TypeOf((*MockAuthorization)(nil).Grantor), ctx, authorizationReq)
}

// Grant mocks base method
func (m *MockAuthorization) Grant(ctx context.Context, authorizationReq entity.AuthorizationRequestJSON) (entity.OauthAccessGrantJSON, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Grant", ctx, authorizationReq)
	ret0, _ := ret[0].(entity.OauthAccessGrantJSON)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// Grant indicates an expected call of Grant
func (mr *MockAuthorizationMockRecorder) Grant(ctx, authorizationReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Grant", reflect.TypeOf((*MockAuthorization)(nil).Grant), ctx, authorizationReq)
}

// GrantToken mocks base method
func (m *MockAuthorization) GrantToken(ctx context.Context, authorizationReq entity.AuthorizationRequestJSON) (entity.OauthAccessTokenJSON, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantToken", ctx, authorizationReq)
	ret0, _ := ret[0].(entity.OauthAccessTokenJSON)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// GrantToken indicates an expected call of GrantToken
func (mr *MockAuthorizationMockRecorder) GrantToken(ctx, authorizationReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantToken", reflect.TypeOf((*MockAuthorization)(nil).GrantToken), ctx, authorizationReq)
}

// Token mocks base method
func (m *MockAuthorization) Token(ctx context.Context, accessTokenReq entity.AccessTokenRequestJSON) (entity.OauthAccessTokenJSON, *entity.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", ctx, accessTokenReq)
	ret0, _ := ret[0].(entity.OauthAccessTokenJSON)
	ret1, _ := ret[1].(*entity.Error)
	return ret0, ret1
}

// Token indicates an expected call of Token
func (mr *MockAuthorizationMockRecorder) Token(ctx, accessTokenReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockAuthorization)(nil).Token), ctx, accessTokenReq)
}
